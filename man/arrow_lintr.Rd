% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lint.R
\name{arrow_lintr}
\alias{arrow_lintr}
\title{Checks that \code{=} is used for assignment}
\usage{
arrow_lintr(source_file)
}
\arguments{
\item{source_file}{returned by \code{\link[lintr]{get_source_expressions}}}
}
\description{
Available linters
}
\section{Functions}{

\itemize{
\item \code{T_and_F_symbol_linter}: Avoid the symbols \code{T} and \code{F} (for \code{TRUE} and \code{FALSE}).

\item \code{assignment_linter}: checks that '<-' is always used for assignment

\item \code{closed_curly_linter}: check that closed curly braces should always be on their
own line unless they follow an else.

\item \code{commas_linter}: check that all commas are followed by spaces, but do not
have spaces before them.

\item \code{commented_code_linter}: Check that there is no commented code outside roxygen
blocks

\item \code{todo_comment_linter}: Check that the source contains no TODO comments (case-insensitive).

\item \code{cyclocomp_linter}: Check for overly complicated expressions. See
\code{\link[cyclocomp]{cyclocomp}}.

\item \code{object_name_linter}: Check that object names conform to a naming style.

\item \code{object_length_linter}: check that object names are not too long.

\item \code{camel_case_linter}: check that objects are not in camelCase.

\item \code{equals_na_linter}: that checks for x == NA

\item \code{extraction_operator_linter}: Check that the `[[` operator is used when extracting a single element from
an object, not `[` (subsetting) nor `$` (interactive use).

\item \code{function_left_parentheses_linter}: check that all left parentheses in a function call
do not have spaces before them.

\item \code{implicit_integer_linter}: Check that integers are explicitly typed using the form \code{1L} instead of
\code{1}.

\item \code{infix_spaces_linter}: check that all infix operators have spaces around them.

\item \code{line_length_linter}: check the line length of both comments and code is less
than length.

\item \code{no_tab_linter}: check that only spaces are used for indentation, not tabs.

\item \code{object_usage_linter}: checks that closures have the proper usage using
\code{\link[codetools]{checkUsage}}.  Note this runs
\code{\link[base]{eval}} on the code, so do not use with untrusted code.

\item \code{open_curly_linter}: check that opening curly braces are never on their own
line and are always followed by a newline.

\item \code{paren_brace_linter}: check that there is a space between right
parenthesis and an opening curly brace.

\item \code{absolute_path_linter}: Check that no absolute paths are used (e.g. "/var", "C:\\System", "~/docs").

\item \code{nonportable_path_linter}: Check that file.path() is used to construct safe and portable paths.

\item \code{pipe_continuation_linter}: Check that each step in a pipeline is on a new line, or
the entire pipe fits on one line.

\item \code{semicolon_terminator_linter}: Check that no semicolons terminate statements.

\item \code{seq_linter}: check for \code{1:length(...)}, \code{1:nrow(...)},
\code{1:ncol(...)}, \code{1:NROW(...)} and \code{1:NCOL(...)}
expressions. These often cause bugs when the right hand side is zero.
It is safer to use \code{\link[base]{seq_len}} or
\code{\link[base]{seq_along}} instead.

\item \code{single_quotes_linter}: checks that only single quotes are used to delimit
string constants.

\item \code{spaces_inside_linter}: check that parentheses and square brackets do not have
spaces directly inside them.

\item \code{spaces_left_parentheses_linter}: check that all left parentheses have a space before them
unless they are in a function call.

\item \code{trailing_blank_lines_linter}: check there are no trailing blank lines.

\item \code{trailing_whitespace_linter}: check there are no trailing whitespace characters.

\item \code{undesirable_function_linter}: Report the use of undesirable functions, e.g. \code{return}, \code{options},
or \code{sapply} and suggest an alternative.

\item \code{undesirable_operator_linter}: Report the use of undesirable operators, e.g. \code{`:::`} or \code{`<<-`}
and suggest an alternative.

\item \code{unneeded_concatenation_linter}: Check that the \code{c} function is not used without arguments nor with a
single constant.
}
}

